name: ARMv8 Docker OpenWrt

on:
  workflow_dispatch:
  schedule:
    - cron: 0 23 * * 5

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: configs/armv8-docker.config
  DIY_SCRIPT: diy-script.sh
  CLASH_KERNEL: arm64
  DOCKER_BUILD: buildImageX.sh
  DOCKER_IMAGE: summary/openwrt-aarch64
  TZ: Asia/Shanghai
  
jobs:
  Build:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"

    - name: Clone Source Code
      run: |
        df -hT $GITHUB_WORKSPACE
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        version=$(cat "package/lean/default-settings/files/zzz-default-settings" | grep DISTRIB_REVISION= | awk -F "'" '{print $2}')
        echo "TAG=$version" >> $GITHUB_ENV

    - name: Install Feeds
      run: |
        cd $OPENWRT_PATH
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files $OPENWRT_PATH/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_PATH/.config
        sed -i '/\/clash_/d; /.dat/d' scripts/preset-clash-core.sh
        chmod +x $GITHUB_WORKSPACE/scripts/*.sh
        chmod +x $DIY_SCRIPT
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$DIY_SCRIPT
        $GITHUB_WORKSPACE/scripts/preset-clash-core.sh $CLASH_KERNEL

    - name: Download DL Package
      run: |
        cd $OPENWRT_PATH
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Firmware
      id: compile
      run: |
        cd $OPENWRT_PATH
        mkdir -p files/etc/uci-defaults
        cp $GITHUB_WORKSPACE/scripts/init-settings.sh files/etc/uci-defaults/99-init-settings
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Generate Firmware
      if: steps.compile.outputs.status == 'success'
      id: generate
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        cat config.buildinfo
        cp *rootfs.tar.gz $GITHUB_WORKSPACE/docker
        cd $GITHUB_WORKSPACE/docker
        chmod +x $DOCKER_BUILD && ./$DOCKER_BUILD
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Set up QEMU
      uses: docker/setup-qemu-action@master

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@master
      
    - name: Upload Bin Directory
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_PATH }}/bin

    - name: Organize Files
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        cat sha256sums
        cp $OPENWRT_PATH/.config build.config
        mv -f $OPENWRT_PATH/bin/packages/*/*/*.ipk packages
        tar -zcf Packages.tar.gz packages
        rm -rf packages feeds.buildinfo version.buildinfo
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

    - name: Upload Firmware To Artifact
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}

    - name: Upload Firmware To Release
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
        allowUpdates: true
        tag: ${{ env.FIRMWARE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/*
        body: |
          **This is Temporary Firmware for Armvirt 64**
          ### 📒 固件信息
          - 🚀 成品固件点击此处跳转➦[PLUS](https://github.com/haiibo/OpenWrt/releases/tag/ARMv8_PLUS)即可下载
          - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }} (多功能临时固件)
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🌐 默认地址: 192.168.1.1
          - 🔑 默认密码: password
          ### 🧊 固件版本
          - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
          - ${{ env.COMMIT_AUTHOR }}
          - ${{ env.COMMIT_DATE }}
          - ${{ env.COMMIT_MESSAGE }}
          - ${{ env.COMMIT_HASH }}

    env:
      COMMIT_AUTHOR: ${{ needs.Build.outputs.COMMIT_AUTHOR }}
      COMMIT_DATE: ${{ needs.Build.outputs.COMMIT_DATE }}
      COMMIT_MESSAGE: ${{ needs.Build.outputs.COMMIT_MESSAGE }}
      COMMIT_HASH: ${{ needs.Build.outputs.COMMIT_HASH }}
      DEVICE_TARGET: ${{ needs.Build.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ needs.Build.outputs.DEVICE_SUBTARGET }}
steps:
  - name: Checkout
    uses: actions/checkout@main

  - name: Initialization Environment
    env:
      DEBIAN_FRONTEND: noninteractive
    run: |
      docker rmi $(docker images -q)
      sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
      sudo -E apt-get -y update
      sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
      sudo -E apt-get -y autoremove --purge
      sudo -E apt-get -y clean
      sudo timedatectl set-timezone "$TZ"
  - name: Initialization Environment
    env:
      DEBIAN_FRONTEND: noninteractive
    run: |
      docker rmi $(docker images -q)
      sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
      sudo -E apt-get -y update
      sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
      sudo -E apt-get -y autoremove --purge
      sudo -E apt-get -y clean
      sudo timedatectl set-timezone "$TZ"

    - name: Download Armvirt Firmware
      id: download
      run: |
        FIRMWARE_PATH=openwrt/bin/targets/armvirt/64
        [ -d $FIRMWARE_PATH ] || mkdir -p $FIRMWARE_PATH
        cd $FIRMWARE_PATH
        RELEASE_URL=$(curl -s "https://api.github.com/repos/$GITHUB_REPOSITORY/releases" | jq -r ".[] | select(.tag_name == \"$FIRMWARE_TAG\").assets[] | select(.name | endswith(\"rootfs.tar.gz\")).browser_download_url")
        wget -q $RELEASE_URL
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date +"%y.%m.%d")" >> $GITHUB_ENV

    - name: Package OpenWrt Firmware
      if: steps.download.outputs.status == 'success'
      uses: ophub/flippy-openwrt-actions@main
      env:
        OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/*rootfs.tar.gz
        PACKAGE_SOC: all
        WHOAMI: Haiibo
        KERNEL_VERSION_NAME: 5.15.13_6.1.5
        KERNEL_AUTO_LATEST: true
        DISTRIB_REVISION: R${{ env.DATE1 }} by Haiibo

    - name: Upload OpenWrt To Artifact
      if: env.PACKAGED_STATUS == 'success' && env.OPENWRT_RELEASE != 'true'
      uses: kittaakos/upload-artifact-as-is@master
      with:
        path: ${{ env.PACKAGED_OUTPUTPATH }}

    - name: Upload OpenWrt To Release
      if: env.PACKAGED_STATUS == 'success' && env.OPENWRT_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }} for ${{ env.OPENWRT_TAG }}
        allowUpdates: true
        removeArtifacts: true
        tag: ${{ env.OPENWRT_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
        body: |
          **This is OpenWrt Firmware for Armvirt 64**
          ### 📒 固件信息
          - 🚀 ARMv8 多功能版，集成插件多适合折腾
          - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🌐 默认地址: 192.168.1.1
          - 🔑 默认密码: password
          ### 🍻 安装与更新
          - 用插件安装: 系统 → 晶晨宝盒 → 安装 OpenWrt → 选择型号 → 安装
          - 用命令安装: U盘启动成功后输入命令 `openwrt-install-amlogic` 按照英文提示写入到 emmc
          - 用插件更新: 系统 → 晶晨宝盒 → 在线下载更新 → 完整更新全系统
          - 用命令更新: 上传固件到 `/mnt/mmcblk2p4` 目录，输入命令 `openwrt-update-amlogic` 即可更新
          - 注意: 如非 `amlogic` 平台，请将其更改为对应平台 `rockchip` `allwinner`
          - 部分常见问题及注意事项请参考恩山论坛F大➦[最新帖](https://www.right.com.cn/forum/thread-4076037-1-1.html)
          ### 🧊 固件版本
          - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
          - ${{ env.COMMIT_AUTHOR }}
          - ${{ env.COMMIT_DATE }}
          - ${{ env.COMMIT_MESSAGE }}
          - ${{ env.COMMIT_HASH }}


